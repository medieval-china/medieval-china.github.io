(function ($) {
  // 通知堆栈
  var notificationStack = [];
  // 模版Map
  var templateMap = {};
  // 通知wrapper
  var $wrapper = null;
  // 通知容器
  var $notifyBox = null;
  // 控制条
  var $toolbar = null;
  /**
   *  初始化方法
   */
  function init(cb) {
    $wrapper = $('<div class="notify-wrapper"></div>');
    $notifyBox = $('<div class="notify-box"></div>');
    $toolbar = $(
      '<div class="notify-toolbar"><div class="notify-toolbar-title">网站新评论</div><div class="notify-toolbar-action">清除所有</div></div>',
    );

    $wrapper.append($toolbar);
    $wrapper.append($notifyBox);
    $('body').append($wrapper);
    cb && cb();
  }

  function hideWrapper() {
    $wrapper.css({ transform: 'translateX(calc(100% - 20px))', overflow: 'hidden' });
  }

  function showWrapper() {
    $wrapper.css({ transform: 'translateX(0)', overflow: 'auto' });
  }

  function showToolbar() {
    $wrapper.css({ width: 'auto' });
    $toolbar.addClass('enter').css({ opacity: 1 });
    setTimeout(() => {
      $wrapper.css({ overflow: 'auto' });
    }, 500);
  }
  function hideToolbar() {
    $wrapper.css({ overflow: 'hidden', width: 0 });
    $toolbar.removeClass('enter').css({ opacity: 1 });
  }

  // 隐藏单个通知
  function hideItem(duration, config) {
    return new Promise(function (resolve) {
      setTimeout(function () {
        config.el.removeClass('enter');
        resolve(function () {
          config.el.remove();
          notificationStack.splice(notificationStack.indexOf(config), 1);
        });
      }, duration);
    });
  }

  /**
   * 渲染模版
   * @param {*} teplName
   * @param {*} data
   */
  function render(templName, data) {
    if (templateMap[templName]) {
      var $teplate = $(templateMap[templName]);

      $teplate.find('[data-notify-text]').each(function () {
        var key = $(this).data('notify-text');
        if (data[key]) {
          $(this).text(data[key]);
        }
      });

      $teplate.find('[data-notify-html]').each(function () {
        var key = $(this).data('notify-html');
        if (data[key]) {
          $(this).html(data[key]);
        }
      });

      return $teplate;
    }
    return null;
  }

  /**
   * 提示
   * @param {*} data
   * @param {*} config
   */
  function notify(data, config) {
    var templateName = config.template;
    var $node = render(templateName, data);
    var $wrapperNode = $('<div class="notify-item"></div>').append($node);

    showToolbar();
    $notifyBox.append($wrapperNode);

    setTimeout(function () {
      var notificationItem = Object.assign(
        {},
        {
          el: $wrapperNode,
        },
        config,
      );

      $wrapperNode.addClass('enter');
      $wrapper[0].scrollTo({
        top: $wrapper.scrollTop() + $wrapper.height() * 2,
        left: 0,
        behavior: 'smooth',
      });
      notificationStack.push(notificationItem);
      // 绑定关闭关闭
      $wrapperNode.find('.close-btn').on('click', function () {
        hideItem(0, notificationItem).then((cb) => {
          setTimeout(() => {
            cb();
            if(notificationStack.length <= 0 ) {
              hideToolbar()
            }
          }, 500);
        });
      });
    }, 250);
  }

  // 添加模版方法
  notify.addTemplate = function (templName, html) {
    templateMap[templName] = html;
  };

  // 清除所有通知
  notify.clearAll = function () {
    var tasks = [];

    for (var len = notificationStack.length - 1; len >= 0; len--) {
      var notificationItem = notificationStack[len];
      var $el = notificationItem.el;
      var itemIdx = notificationStack.length - (len + 1);

      tasks.push(hideItem(itemIdx * 250, notificationItem));
    }

    Promise.all(tasks).then(function (resList) {
      resList.forEach(function (cb) {
        cb && cb();
      });
      hideToolbar()
    });
  };

  // 初始化
  init(function () {
    hideToolbar();
    // 绑定清除所有
    $toolbar.find('.notify-toolbar-action').on('click', function () {
      notify.clearAll();
    });
    // 绑定隐藏wrapper
    var eventName = ZHAOO.utils.hasMobileUA() ? 'touchstart' : 'click';
    $(window).on(eventName, function (e) {
      if (notificationStack.length && !$wrapper[0].contains(e.target)) {
        hideWrapper();
      }
    });
    // 绑定显示wrapper
    $wrapper.on('click', function () {
      if (notificationStack.length) {
        showWrapper();
      }
    });
  });
  $.extend({ notify: notify });
})(jQuery);
