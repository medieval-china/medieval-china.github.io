"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,r){for(var o=0;o<r.length;o++){var t=r[o];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,_toPropertyKey(t.key),t)}}function _createClass(e,r,o){return r&&_defineProperties(e.prototype,r),o&&_defineProperties(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){var r=_toPrimitive(e,"string");return"symbol"===_typeof(r)?r:String(r)}function _toPrimitive(e,r){if("object"!==_typeof(e)||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===r?String:Number)(e);var t=o.call(e,r||"default");if("object"!==_typeof(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.WebGLContext=void 0;var _util=require("../shared/util.js"),WebGLContext=function(){function t(e){var r=e.enable,o=void 0!==r&&r;_classCallCheck(this,t),this._enabled=!0===o}return _createClass(t,[{key:"isEnabled",get:function(){var e=this._enabled;return e&&(e=WebGLUtils.tryInitGL()),(0,_util.shadow)(this,"isEnabled",e)}},{key:"composeSMask",value:function(e){var r=e.layer,o=e.mask,t=e.properties;return WebGLUtils.composeSMask(r,o,t)}},{key:"drawFigures",value:function(e){var r=e.width,o=e.height,t=e.backgroundColor,i=e.figures,a=e.context;return WebGLUtils.drawFigures(r,o,t,i,a)}},{key:"clear",value:function(){WebGLUtils.cleanup()}}]),t}();exports.WebGLContext=WebGLContext;var WebGLUtils=function(){function o(e,r,o){var t=e.createShader(o);if(e.shaderSource(t,r),e.compileShader(t),e.getShaderParameter(t,e.COMPILE_STATUS))return t;var i=e.getShaderInfoLog(t);throw new Error("Error during shader compilation: "+i)}function k(e,r){return o(e,r,e.VERTEX_SHADER)}function x(e,r){return o(e,r,e.FRAGMENT_SHADER)}function F(e,r){for(var o=e.createProgram(),t=0,i=r.length;t<i;++t)e.attachShader(o,r[t]);if(e.linkProgram(o),e.getProgramParameter(o,e.LINK_STATUS))return o;var a=e.getProgramInfoLog(o);throw new Error("Error during program linking: "+a)}function f(e,r,o){e.activeTexture(o);var t=e.createTexture();return e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,r),t}var B,D;function G(){B||(D=document.createElement("canvas"),B=D.getContext("webgl",{premultipliedalpha:!1}))}var v="  attribute vec2 a_position;                                      attribute vec2 a_texCoord;                                                                                                      uniform vec2 u_resolution;                                                                                                      varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_texCoord = a_texCoord;                                      }                                                             ",_="  precision mediump float;                                                                                                        uniform vec4 u_backdrop;                                        uniform int u_subtype;                                          uniform sampler2D u_image;                                      uniform sampler2D u_mask;                                                                                                       varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec4 imageColor = texture2D(u_image, v_texCoord);               vec4 maskColor = texture2D(u_mask, v_texCoord);                 if (u_backdrop.a > 0.0) {                                         maskColor.rgb = maskColor.rgb * maskColor.a +                                   u_backdrop.rgb * (1.0 - maskColor.a);         }                                                               float lum;                                                      if (u_subtype == 0) {                                             lum = maskColor.a;                                            } else {                                                          lum = maskColor.r * 0.3 + maskColor.g * 0.59 +                        maskColor.b * 0.11;                                     }                                                               imageColor.a *= lum;                                            imageColor.rgb *= imageColor.a;                                 gl_FragColor = imageColor;                                    }                                                             ",m=null;var I="  attribute vec2 a_position;                                      attribute vec3 a_color;                                                                                                         uniform vec2 u_resolution;                                      uniform vec2 u_scale;                                           uniform vec2 u_offset;                                                                                                          varying vec4 v_color;                                                                                                           void main() {                                                     vec2 position = (a_position + u_offset) * u_scale;              vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;         gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_color = vec4(a_color / 255.0, 1.0);                         }                                                             ",W="  precision mediump float;                                                                                                        varying vec4 v_color;                                                                                                           void main() {                                                     gl_FragColor = v_color;                                       }                                                             ",N=null;return{tryInitGL:function(){try{return G(),!!B}catch(e){}return!1},composeSMask:function(e,r,o){var t=e.width,i=e.height;m||function(){G();var e=D,r=B;B=D=null;var o=F(r,[k(r,v),x(r,_)]);r.useProgram(o);var t={};t.gl=r,t.canvas=e,t.resolutionLocation=r.getUniformLocation(o,"u_resolution"),t.positionLocation=r.getAttribLocation(o,"a_position"),t.backdropLocation=r.getUniformLocation(o,"u_backdrop"),t.subtypeLocation=r.getUniformLocation(o,"u_subtype");var i=r.getAttribLocation(o,"a_texCoord"),a=r.getUniformLocation(o,"u_image"),n=r.getUniformLocation(o,"u_mask"),c=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,c),r.bufferData(r.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),r.STATIC_DRAW),r.enableVertexAttribArray(i),r.vertexAttribPointer(i,2,r.FLOAT,!1,0,0),r.uniform1i(a,0),r.uniform1i(n,1),m=t}();var a=m,n=a.canvas,c=a.gl;n.width=t,n.height=i,c.viewport(0,0,c.drawingBufferWidth,c.drawingBufferHeight),c.uniform2f(a.resolutionLocation,t,i),o.backdrop?c.uniform4f(a.resolutionLocation,o.backdrop[0],o.backdrop[1],o.backdrop[2],1):c.uniform4f(a.resolutionLocation,0,0,0,0),c.uniform1i(a.subtypeLocation,"Luminosity"===o.subtype?1:0);var u=f(c,e,c.TEXTURE0),l=f(c,r,c.TEXTURE1),s=c.createBuffer();return c.bindBuffer(c.ARRAY_BUFFER,s),c.bufferData(c.ARRAY_BUFFER,new Float32Array([0,0,t,0,0,i,0,i,t,0,t,i]),c.STATIC_DRAW),c.enableVertexAttribArray(a.positionLocation),c.vertexAttribPointer(a.positionLocation,2,c.FLOAT,!1,0,0),c.clearColor(0,0,0,0),c.enable(c.BLEND),c.blendFunc(c.ONE,c.ONE_MINUS_SRC_ALPHA),c.clear(c.COLOR_BUFFER_BIT),c.drawArrays(c.TRIANGLES,0,6),c.flush(),c.deleteTexture(u),c.deleteTexture(l),c.deleteBuffer(s),n},drawFigures:function(e,r,o,t,i){N||function(){G();var e=D,r=B;B=D=null;var o=F(r,[k(r,I),x(r,W)]);r.useProgram(o);var t={};t.gl=r,t.canvas=e,t.resolutionLocation=r.getUniformLocation(o,"u_resolution"),t.scaleLocation=r.getUniformLocation(o,"u_scale"),t.offsetLocation=r.getUniformLocation(o,"u_offset"),t.positionLocation=r.getAttribLocation(o,"a_position"),t.colorLocation=r.getAttribLocation(o,"a_color"),N=t}();var a=N,n=a.canvas,c=a.gl;n.width=e,n.height=r,c.viewport(0,0,c.drawingBufferWidth,c.drawingBufferHeight),c.uniform2f(a.resolutionLocation,e,r);for(var u=0,l=0,s=t.length;l<s;l++)switch(t[l].type){case"lattice":u+=((t[l].coords.length/t[l].verticesPerRow|0)-1)*(t[l].verticesPerRow-1)*6;break;case"triangles":u+=t[l].coords.length}for(var f=new Float32Array(2*u),v=new Uint8Array(3*u),_=i.coords,m=i.colors,g=0,p=0,b=0,d=t.length;b<d;b++){var E=t[b],A=E.coords,y=E.colors;switch(E.type){case"lattice":for(var L=E.verticesPerRow,R=A.length/L|0,T=1;T<R;T++)for(var h=T*L+1,C=1;C<L;C++,h++)f[g]=_[A[h-L-1]],f[g+1]=_[A[h-L-1]+1],f[g+2]=_[A[h-L]],f[g+3]=_[A[h-L]+1],f[g+4]=_[A[h-1]],f[g+5]=_[A[h-1]+1],v[p]=m[y[h-L-1]],v[p+1]=m[y[h-L-1]+1],v[p+2]=m[y[h-L-1]+2],v[p+3]=m[y[h-L]],v[p+4]=m[y[h-L]+1],v[p+5]=m[y[h-L]+2],v[p+6]=m[y[h-1]],v[p+7]=m[y[h-1]+1],v[p+8]=m[y[h-1]+2],f[g+6]=f[g+2],f[g+7]=f[g+3],f[g+8]=f[g+4],f[g+9]=f[g+5],f[g+10]=_[A[h]],f[g+11]=_[A[h]+1],v[p+9]=v[p+3],v[p+10]=v[p+4],v[p+11]=v[p+5],v[p+12]=v[p+6],v[p+13]=v[p+7],v[p+14]=v[p+8],v[p+15]=m[y[h]],v[p+16]=m[y[h]+1],v[p+17]=m[y[h]+2],g+=12,p+=18;break;case"triangles":for(var U=0,S=A.length;U<S;U++)f[g]=_[A[U]],f[g+1]=_[A[U]+1],v[p]=m[y[U]],v[p+1]=m[y[U]+1],v[p+2]=m[y[U]+2],g+=2,p+=3}}o?c.clearColor(o[0]/255,o[1]/255,o[2]/255,1):c.clearColor(0,0,0,0),c.clear(c.COLOR_BUFFER_BIT);var P=c.createBuffer();c.bindBuffer(c.ARRAY_BUFFER,P),c.bufferData(c.ARRAY_BUFFER,f,c.STATIC_DRAW),c.enableVertexAttribArray(a.positionLocation),c.vertexAttribPointer(a.positionLocation,2,c.FLOAT,!1,0,0);var w=c.createBuffer();return c.bindBuffer(c.ARRAY_BUFFER,w),c.bufferData(c.ARRAY_BUFFER,v,c.STATIC_DRAW),c.enableVertexAttribArray(a.colorLocation),c.vertexAttribPointer(a.colorLocation,3,c.UNSIGNED_BYTE,!1,0,0),c.uniform2f(a.scaleLocation,i.scaleX,i.scaleY),c.uniform2f(a.offsetLocation,i.offsetX,i.offsetY),c.drawArrays(c.TRIANGLES,0,u),c.flush(),c.deleteBuffer(P),c.deleteBuffer(w),n},cleanup:function(){var e,r;null!==(e=m)&&void 0!==e&&e.canvas&&(m.canvas.width=0,m.canvas.height=0),null!==(r=N)&&void 0!==r&&r.canvas&&(N.canvas.width=0,N.canvas.height=0),N=m=null}}}();