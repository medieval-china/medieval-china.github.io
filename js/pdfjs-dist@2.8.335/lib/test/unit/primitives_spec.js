"use strict";var _primitives=require("../../core/primitives.js"),_stream=require("../../core/stream.js"),_test_utils=require("./test_utils.js");describe("primitives",function(){describe("Name",function(){it("should retain the given name",function(){var e="Font",t=_primitives.Name.get(e);expect(t.name).toEqual(e)}),it("should create only one object for a name and cache it",function(){var e=_primitives.Name.get("Font"),t=_primitives.Name.get("Font"),i=_primitives.Name.get("Subtype"),n=_primitives.Name.get("Subtype");expect(e).toBe(t),expect(i).toBe(n),expect(e).not.toBe(i)})}),describe("Cmd",function(){it("should retain the given cmd name",function(){var e=_primitives.Cmd.get("BT");expect(e.cmd).toEqual("BT")}),it("should create only one object for a command and cache it",function(){var e=_primitives.Cmd.get("BT"),t=_primitives.Cmd.get("BT"),i=_primitives.Cmd.get("ET"),n=_primitives.Cmd.get("ET");expect(e).toBe(t),expect(i).toBe(n),expect(e).not.toBe(i)})}),describe("Dict",function(){var i,n,p,e=function(e){expect(e.has()).toBeFalsy(),expect(e.has("Prev")).toBeFalsy()},t=function(e){expect(e.get()).toBeUndefined(),expect(e.get("Prev")).toBeUndefined(),expect(e.get("Decode","D")).toBeUndefined(),expect(e.get("FontFile","FontFile2","FontFile3")).toBeUndefined()},f="file1",m="file2",v="file3";beforeAll(function(e){i=new _primitives.Dict,(n=new _primitives.Dict).set("Size",42),(p=new _primitives.Dict).set("FontFile",f),p.set("FontFile2",m),p.set("FontFile3",v),e()}),afterAll(function(){i=n=p=null}),it("should allow assigning an XRef table after creation",function(){var e=new _primitives.Dict(null);expect(e.xref).toEqual(null);var t=new _test_utils.XRefMock([]);e.assignXref(t),expect(e.xref).toEqual(t)}),it("should return correct size",function(){var e=new _primitives.Dict(null);expect(e.size).toEqual(0),e.set("Type",_primitives.Name.get("Page")),expect(e.size).toEqual(1),e.set("Contents",_primitives.Ref.get(10,0)),expect(e.size).toEqual(2)}),it("should return invalid values for unknown keys",function(){e(i),t(i)}),it("should return correct value for stored Size key",function(){expect(n.has("Size")).toBeTruthy(),expect(n.get("Size")).toEqual(42),expect(n.get("Prev","Size")).toEqual(42),expect(n.get("Prev","Root","Size")).toEqual(42)}),it("should return invalid values for unknown keys when Size key is stored",function(){e(n),t(n)}),it("should not accept to set a key with an undefined value",function(){var e=new _primitives.Dict;expect(function(){e.set("Size")}).toThrow(new Error('Dict.set: The "value" cannot be undefined.')),expect(e.has("Size")).toBeFalsy(),t(e)}),it("should return correct values for multiple stored keys",function(){expect(p.has("FontFile")).toBeTruthy(),expect(p.has("FontFile2")).toBeTruthy(),expect(p.has("FontFile3")).toBeTruthy(),expect(p.get("FontFile3")).toEqual(v),expect(p.get("FontFile2","FontFile3")).toEqual(m),expect(p.get("FontFile","FontFile2","FontFile3")).toEqual(f)}),it("should asynchronously fetch unknown keys",function(t){var e=[p.getAsync("Size"),n.getAsync("FontFile","FontFile2","FontFile3")];Promise.all(e).then(function(e){expect(e[0]).toBeUndefined(),expect(e[1]).toBeUndefined(),t()}).catch(function(e){t.fail(e)})}),it("should asynchronously fetch correct values for multiple stored keys",function(t){var e=[p.getAsync("FontFile3"),p.getAsync("FontFile2","FontFile3"),p.getAsync("FontFile","FontFile2","FontFile3")];Promise.all(e).then(function(e){expect(e[0]).toEqual(v),expect(e[1]).toEqual(m),expect(e[2]).toEqual(f),t()}).catch(function(e){t.fail(e)})}),it("should callback for each stored key",function(){var e=jasmine.createSpy("spy on callback in dictionary");p.forEach(e),expect(e).toHaveBeenCalled();var t=e.calls;expect(t.argsFor(0)).toEqual(["FontFile",f]),expect(t.argsFor(1)).toEqual(["FontFile2",m]),expect(t.argsFor(2)).toEqual(["FontFile3",v]),expect(t.count()).toEqual(3)}),it("should handle keys pointing to indirect objects, both sync and async",function(t){var e=_primitives.Ref.get(1,0),i=new _test_utils.XRefMock([{ref:e,data:f}]),n=new _primitives.Dict(i);n.set("FontFile",e),expect(n.getRaw("FontFile")).toEqual(e),expect(n.get("FontFile","FontFile2","FontFile3")).toEqual(f),n.getAsync("FontFile","FontFile2","FontFile3").then(function(e){expect(e).toEqual(f),t()}).catch(function(e){t.fail(e)})}),it("should handle arrays containing indirect objects",function(){var e=_primitives.Ref.get(1,0),t=_primitives.Ref.get(2,0),i=new _test_utils.XRefMock([{ref:e,data:0},{ref:t,data:1}]),n=new _primitives.Dict(i);n.set("BBox",[0,1,e,t]),expect(n.get("BBox")).toEqual([0,1,e,t]),expect(n.getArray("BBox")).toEqual([0,1,0,1])}),it("should get all key names",function(){var e=p.getKeys();expect(e.sort()).toEqual(["FontFile","FontFile2","FontFile3"])}),it("should get all raw values",function(){var e=[f,m,v],t=p.getRawValues();expect(t.sort()).toEqual(e);var i=_primitives.Name.get("Page"),n=new _primitives.Dict(null),o=_primitives.Ref.get(5,0),s=new _stream.StringStream("data"),a=_primitives.Ref.get(10,0),c=new _test_utils.XRefMock([{ref:o,data:n},{ref:a,data:s}]),r=new _primitives.Dict(c);r.set("Type",i),r.set("Resources",o),r.set("Contents",a);var l=[a,o,i],u=r.getRawValues();expect(u.sort()).toEqual(l)}),it("should create only one object for Dict.empty",function(){var e=_primitives.Dict.empty,t=_primitives.Dict.empty;expect(e).toBe(t),expect(e).not.toBe(i)}),it("should correctly merge dictionaries",function(){var e=new _primitives.Dict;e.set("FontFile","Type1 font file");var t=_primitives.Dict.merge({xref:null,dictArray:[p,n,e]}),i=t.getKeys();expect(i.sort()).toEqual(["FontFile","FontFile2","FontFile3","Size"]),expect(t.get("FontFile")).toEqual(f)}),it("should correctly merge sub-dictionaries",function(){var e=new _primitives.Dict;e.set("F1","Local font one");var t=new _primitives.Dict;t.set("F1","Global font one"),t.set("F2","Global font two"),t.set("F3","Global font three");var i=new _primitives.Dict;i.set("Font",e);var n=new _primitives.Dict;n.set("Font",t);var o=_primitives.Dict.merge({xref:null,dictArray:[i,n]}),s=_primitives.Dict.merge({xref:null,dictArray:[i,n],mergeSubDicts:!0}),a=o.get("Font"),c=s.get("Font");expect(a instanceof _primitives.Dict).toEqual(!0),expect(c instanceof _primitives.Dict).toEqual(!0);var r=a.getKeys(),l=c.getKeys();expect(r).toEqual(["F1"]),expect(l).toEqual(["F1","F2","F3"]);var u=a.getRawValues(),p=c.getRawValues();expect(u).toEqual(["Local font one"]),expect(p).toEqual(["Local font one","Global font two","Global font three"])})}),describe("Ref",function(){it("should get a string representation",function(){var e=_primitives.Ref.get(4,2);expect(e.toString()).toEqual("4R2");var t=_primitives.Ref.get(4,0);expect(t.toString()).toEqual("4R")}),it("should retain the stored values",function(){var e=_primitives.Ref.get(4,2);expect(e.num).toEqual(4),expect(e.gen).toEqual(2)}),it("should create only one object for a reference and cache it",function(){var e=_primitives.Ref.get(4,2),t=_primitives.Ref.get(4,2),i=_primitives.Ref.get(5,2),n=_primitives.Ref.get(5,2);expect(e).toBe(t),expect(i).toBe(n),expect(e).not.toBe(i)})}),describe("RefSet",function(){it("should have a stored value",function(){var e=_primitives.Ref.get(4,2),t=new _primitives.RefSet;t.put(e),expect(t.has(e)).toBeTruthy()}),it("should not have an unknown value",function(){var e=_primitives.Ref.get(4,2),t=new _primitives.RefSet;expect(t.has(e)).toBeFalsy(),t.put(e);var i=_primitives.Ref.get(2,4);expect(t.has(i)).toBeFalsy()})}),describe("RefSetCache",function(){var i,e=_primitives.Ref.get(4,2),n=_primitives.Ref.get(5,2),o=_primitives.Name.get("foo"),s=_primitives.Name.get("bar");beforeEach(function(e){i=new _primitives.RefSetCache,e()}),afterEach(function(){i=null}),it("should put, have and get a value",function(){i.put(e,o),expect(i.has(e)).toBeTruthy(),expect(i.has(n)).toBeFalsy(),expect(i.get(e)).toBe(o)}),it("should put, have and get a value by alias",function(){i.put(e,o),i.putAlias(n,e),expect(i.has(e)).toBeTruthy(),expect(i.has(n)).toBeTruthy(),expect(i.get(e)).toBe(o),expect(i.get(n)).toBe(o)}),it("should report the size of the cache",function(){i.put(e,o),expect(i.size).toEqual(1),i.put(n,s),expect(i.size).toEqual(2)}),it("should clear the cache",function(){i.put(e,o),expect(i.size).toEqual(1),i.clear(),expect(i.size).toEqual(0)}),it("should support iteration",function(){i.put(e,o),i.put(n,s);var t=[];i.forEach(function(e){t.push(e)}),expect(t).toEqual([o,s])})}),describe("isEOF",function(){it("handles non-EOF",function(){expect((0,_primitives.isEOF)("foo")).toEqual(!1)}),it("handles EOF",function(){expect((0,_primitives.isEOF)(_primitives.EOF)).toEqual(!0)})}),describe("isName",function(){it("handles non-names",function(){expect((0,_primitives.isName)({})).toEqual(!1)}),it("handles names",function(){var e=_primitives.Name.get("Font");expect((0,_primitives.isName)(e)).toEqual(!0)}),it("handles names with name check",function(){var e=_primitives.Name.get("Font");expect((0,_primitives.isName)(e,"Font")).toEqual(!0),expect((0,_primitives.isName)(e,"Subtype")).toEqual(!1)})}),describe("isCmd",function(){it("handles non-commands",function(){expect((0,_primitives.isCmd)({})).toEqual(!1)}),it("handles commands",function(){var e=_primitives.Cmd.get("BT");expect((0,_primitives.isCmd)(e)).toEqual(!0)}),it("handles commands with cmd check",function(){var e=_primitives.Cmd.get("BT");expect((0,_primitives.isCmd)(e,"BT")).toEqual(!0),expect((0,_primitives.isCmd)(e,"ET")).toEqual(!1)})}),describe("isDict",function(){it("handles non-dictionaries",function(){expect((0,_primitives.isDict)({})).toEqual(!1)}),it("handles empty dictionaries with type check",function(){var e=_primitives.Dict.empty;expect((0,_primitives.isDict)(e)).toEqual(!0),expect((0,_primitives.isDict)(e,"Page")).toEqual(!1)}),it("handles dictionaries with type check",function(){var e=new _primitives.Dict;e.set("Type",_primitives.Name.get("Page")),expect((0,_primitives.isDict)(e,"Page")).toEqual(!0),expect((0,_primitives.isDict)(e,"Contents")).toEqual(!1)})}),describe("isRef",function(){it("handles non-refs",function(){expect((0,_primitives.isRef)({})).toEqual(!1)}),it("handles refs",function(){var e=_primitives.Ref.get(1,0);expect((0,_primitives.isRef)(e)).toEqual(!0)})}),describe("isRefsEqual",function(){it("should handle Refs pointing to the same object",function(){var e=_primitives.Ref.get(1,0),t=_primitives.Ref.get(1,0);expect((0,_primitives.isRefsEqual)(e,t)).toEqual(!0)}),it("should handle Refs pointing to different objects",function(){var e=_primitives.Ref.get(1,0),t=_primitives.Ref.get(2,0);expect((0,_primitives.isRefsEqual)(e,t)).toEqual(!1)})}),describe("isStream",function(){it("handles non-streams",function(){expect((0,_primitives.isStream)({})).toEqual(!1)}),it("handles streams",function(){var e=new _stream.StringStream("foo");expect((0,_primitives.isStream)(e)).toEqual(!0)})})});