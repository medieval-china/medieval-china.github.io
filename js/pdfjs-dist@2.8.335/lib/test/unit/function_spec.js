"use strict";var _function=require("../../core/function.js"),_ps_parser=require("../../core/ps_parser.js"),_stream=require("../../core/stream.js");describe("function",function(){beforeEach(function(){jasmine.addMatchers({toMatchArray:function(t,e){return{compare:function(t,e){var a={};if(t.length!==e.length)return a.pass=!1,a.message="Array length: "+t.length+", expected: "+e.length,a;a.pass=!0;for(var r=0;r<e.length;r++){var n=t[r],i=e[r];if(Array.isArray(i)){if(n.length!==i.length){a.pass=!1;break}for(var c=0;c<n.length;c++){if(n[c]!==i[c]){a.pass=!1;break}}}else if(n!==i){a.pass=!1;break}}return a}}}})}),describe("PostScriptParser",function(){function a(t){var e=new _stream.StringStream(t);return new _ps_parser.PostScriptParser(new _ps_parser.PostScriptLexer(e)).parse()}it("parses empty programs",function(){var t=a("{}");expect(t.length).toEqual(0)}),it("parses positive numbers",function(){var t=a("{ 999 }"),e=[999];expect(t).toMatchArray(e)}),it("parses negative numbers",function(){var t=a("{ -999 }"),e=[-999];expect(t).toMatchArray(e)}),it("parses negative floats",function(){var t=a("{ 3.3 }"),e=[3.3];expect(t).toMatchArray(e)}),it("parses operators",function(){var t=a("{ sub }");expect(t).toMatchArray(["sub"])}),it("parses if statements",function(){var t=a("{ { 99 } if }");expect(t).toMatchArray([3,"jz",99])}),it("parses ifelse statements",function(){var t=a("{ { 99 } { 44 } ifelse }");expect(t).toMatchArray([5,"jz",99,6,"j",44])}),it("handles missing brackets",function(){expect(function(){a("{")}).toThrow(new Error("Unexpected symbol: found undefined expected 1."))}),it("handles junk after the end",function(){var t=a("{ 3.3 }#"),e=[3.3];expect(t).toMatchArray(e)})}),describe("PostScriptEvaluator",function(){function a(t){var e=new _stream.StringStream(t),a=new _ps_parser.PostScriptParser(new _ps_parser.PostScriptLexer(e)).parse();return new _function.PostScriptEvaluator(a).execute()}it("pushes stack",function(){var t=a("{ 99 }");expect(t).toMatchArray([99])}),it("handles if with true",function(){var t=a("{ 1 {99} if }");expect(t).toMatchArray([99])}),it("handles if with false",function(){var t=a("{ 0 {99} if }");expect(t).toMatchArray([])}),it("handles ifelse with true",function(){var t=a("{ 1 {99} {77} ifelse }");expect(t).toMatchArray([99])}),it("handles ifelse with false",function(){var t=a("{ 0 {99} {77} ifelse }");expect(t).toMatchArray([77])}),it("handles nested if",function(){var t=a("{ 1 {1 {77} if} if }");expect(t).toMatchArray([77])}),it("abs",function(){var t=a("{ -2 abs }");expect(t).toMatchArray([2])}),it("adds",function(){var t=a("{ 1 2 add }");expect(t).toMatchArray([3])}),it("boolean and",function(){var t=a("{ true false and }");expect(t).toMatchArray([!1])}),it("bitwise and",function(){var t=a("{ 254 1 and }");expect(t).toMatchArray([0])}),it("calculates the inverse tangent of a number",function(){var t=a("{ 90 atan }"),e=[Math.atan(90)];expect(t).toMatchArray(e)}),it("handles bitshifting ",function(){var t=a("{ 50 2 bitshift }");expect(t).toMatchArray([200])}),it("calculates the ceiling value",function(){var t=a("{ 9.9 ceiling }");expect(t).toMatchArray([10])}),it("copies",function(){var t=a("{ 99 98 2 copy }");expect(t).toMatchArray([99,98,99,98])}),it("calculates the cosine of a number",function(){var t=a("{ 90 cos }"),e=[Math.cos(90)];expect(t).toMatchArray(e)}),it("converts to int",function(){var t=a("{ 9.9 cvi }");expect(t).toMatchArray([9])}),it("converts negatives to int",function(){var t=a("{ -9.9 cvi }");expect(t).toMatchArray([-9])}),it("converts to real",function(){var t=a("{ 55.34 cvr }");expect(t).toMatchArray([55.34])}),it("divides",function(){var t=a("{ 6 5 div }");expect(t).toMatchArray([1.2])}),it("maps division by zero to infinity",function(){var t=a("{ 6 0 div }"),e=[1/0];expect(t).toMatchArray(e)}),it("duplicates",function(){var t=a("{ 99 dup }");expect(t).toMatchArray([99,99])}),it("accepts an equality",function(){var t=a("{ 9 9 eq }");expect(t).toMatchArray([!0])}),it("rejects an inequality",function(){var t=a("{ 9 8 eq }");expect(t).toMatchArray([!1])}),it("exchanges",function(){var t=a("{ 44 99 exch }");expect(t).toMatchArray([99,44])}),it("handles exponentiation",function(){var t=a("{ 10 2 exp }");expect(t).toMatchArray([100])}),it("pushes false onto the stack",function(){var t=a("{ false }");expect(t).toMatchArray([!1])}),it("calculates the floor value",function(){var t=a("{ 9.9 floor }");expect(t).toMatchArray([9])}),it("handles greater than or equal to",function(){var t=a("{ 10 9 ge }");expect(t).toMatchArray([!0])}),it("rejects less than for greater than or equal to",function(){var t=a("{ 8 9 ge }");expect(t).toMatchArray([!1])}),it("handles greater than",function(){var t=a("{ 10 9 gt }");expect(t).toMatchArray([!0])}),it("rejects less than or equal for greater than",function(){var t=a("{ 9 9 gt }");expect(t).toMatchArray([!1])}),it("divides to integer",function(){var t=a("{ 2 3 idiv }");expect(t).toMatchArray([0])}),it("divides to negative integer",function(){var t=a("{ -2 3 idiv }");expect(t).toMatchArray([0])}),it("duplicates index",function(){var t=a("{ 4 3 2 1 2 index }");expect(t).toMatchArray([4,3,2,1,3])}),it("handles less than or equal to",function(){var t=a("{ 9 10 le }");expect(t).toMatchArray([!0])}),it("rejects greater than for less than or equal to",function(){var t=a("{ 10 9 le }");expect(t).toMatchArray([!1])}),it("calculates the natural logarithm",function(){var t=a("{ 10 ln }"),e=[Math.log(10)];expect(t).toMatchArray(e)}),it("calculates the base 10 logarithm",function(){var t=a("{ 100 log }");expect(t).toMatchArray([2])}),it("handles less than",function(){var t=a("{ 9 10 lt }");expect(t).toMatchArray([!0])}),it("rejects greater than or equal to for less than",function(){var t=a("{ 10 9 lt }");expect(t).toMatchArray([!1])}),it("performs the modulo operation",function(){var t=a("{ 4 3 mod }");expect(t).toMatchArray([1])}),it("multiplies two numbers (positive result)",function(){var t=a("{ 9 8 mul }");expect(t).toMatchArray([72])}),it("multiplies two numbers (negative result)",function(){var t=a("{ 9 -8 mul }");expect(t).toMatchArray([-72])}),it("accepts an inequality",function(){var t=a("{ 9 8 ne }");expect(t).toMatchArray([!0])}),it("rejects an equality",function(){var t=a("{ 9 9 ne }");expect(t).toMatchArray([!1])}),it("negates",function(){var t=a("{ 4.5 neg }");expect(t).toMatchArray([-4.5])}),it("boolean not",function(){var t=a("{ true not }");expect(t).toMatchArray([!1])}),it("bitwise not",function(){var t=a("{ 12 not }");expect(t).toMatchArray([-13])}),it("boolean or",function(){var t=a("{ true false or }");expect(t).toMatchArray([!0])}),it("bitwise or",function(){var t=a("{ 254 1 or }");expect(t).toMatchArray([255])}),it("pops stack",function(){var t=a("{ 1 2 pop }");expect(t).toMatchArray([1])}),it("rolls stack right",function(){var t=a("{ 1 3 2 2 4 1 roll }");expect(t).toMatchArray([2,1,3,2])}),it("rolls stack left",function(){var t=a("{ 1 3 2 2 4 -1 roll }");expect(t).toMatchArray([3,2,2,1])}),it("rounds a number",function(){var t=a("{ 9.52 round }");expect(t).toMatchArray([10])}),it("calculates the sine of a number",function(){var t=a("{ 90 sin }"),e=[Math.sin(90)];expect(t).toMatchArray(e)}),it("calculates a square root (integer)",function(){var t=a("{ 100 sqrt }");expect(t).toMatchArray([10])}),it("calculates a square root (float)",function(){var t=a("{ 99 sqrt }"),e=[Math.sqrt(99)];expect(t).toMatchArray(e)}),it("subtracts (positive result)",function(){var t=a("{ 6 4 sub }");expect(t).toMatchArray([2])}),it("subtracts (negative result)",function(){var t=a("{ 4 6 sub }");expect(t).toMatchArray([-2])}),it("pushes true onto the stack",function(){var t=a("{ true }");expect(t).toMatchArray([!0])}),it("truncates a number",function(){var t=a("{ 35.004 truncate }");expect(t).toMatchArray([35])}),it("calculates an exclusive or value",function(){var t=a("{ 3 9 xor }");expect(t).toMatchArray([10])})}),describe("PostScriptCompiler",function(){function t(t,e,a,r){var n=(new _function.PostScriptCompiler).compile(t,e,a);if(null===r)expect(n).toBeNull();else{expect(n).not.toBeNull();for(var i=new Function("src","srcOffset","dest","destOffset",n),c=0;c<r.length;c++){var o=new Float32Array(r[c].output.length);i(r[c].input,0,o,0),expect(Array.prototype.slice.call(o,0)).toMatchArray(r[c].output)}}}it("check compiled add",function(){t([.25,.5,"add"],[],[0,1],[{input:[],output:[.75]}]),t([0,"add"],[0,1],[0,1],[{input:[.25],output:[.25]}]),t([.5,"add"],[0,1],[0,1],[{input:[.25],output:[.75]}]),t([0,"exch","add"],[0,1],[0,1],[{input:[.25],output:[.25]}]),t([.5,"exch","add"],[0,1],[0,1],[{input:[.25],output:[.75]}]),t(["add"],[0,1,0,1],[0,1],[{input:[.25,.5],output:[.75]}]),t(["add"],[0,1],[0,1],null)}),it("check compiled sub",function(){t([.5,.25,"sub"],[],[0,1],[{input:[],output:[.25]}]),t([0,"sub"],[0,1],[0,1],[{input:[.25],output:[.25]}]),t([.5,"sub"],[0,1],[0,1],[{input:[.75],output:[.25]}]),t([0,"exch","sub"],[0,1],[-1,1],[{input:[.25],output:[-.25]}]),t([.75,"exch","sub"],[0,1],[-1,1],[{input:[.25],output:[.5]}]),t(["sub"],[0,1,0,1],[-1,1],[{input:[.25,.5],output:[-.25]}]),t(["sub"],[0,1],[0,1],null),t([1,"dup",3,2,"roll","sub","sub"],[0,1],[0,1],[{input:[.75],output:[.75]}])}),it("check compiled mul",function(){t([.25,.5,"mul"],[],[0,1],[{input:[],output:[.125]}]),t([0,"mul"],[0,1],[0,1],[{input:[.25],output:[0]}]),t([.5,"mul"],[0,1],[0,1],[{input:[.25],output:[.125]}]),t([1,"mul"],[0,1],[0,1],[{input:[.25],output:[.25]}]),t([0,"exch","mul"],[0,1],[0,1],[{input:[.25],output:[0]}]),t([.5,"exch","mul"],[0,1],[0,1],[{input:[.25],output:[.125]}]),t([1,"exch","mul"],[0,1],[0,1],[{input:[.25],output:[.25]}]),t(["mul"],[0,1,0,1],[0,1],[{input:[.25,.5],output:[.125]}]),t(["mul"],[0,1],[0,1],null)}),it("check compiled max",function(){t(["dup",.75,"gt",7,"jz","pop",.75],[0,1],[0,1],[{input:[.5],output:[.5]}]),t(["dup",.75,"gt",7,"jz","pop",.75],[0,1],[0,1],[{input:[1],output:[.75]}]),t(["dup",.75,"gt",5,"jz","pop",.75],[0,1],[0,1],null)}),it("check pop/roll/index",function(){t([1,"pop"],[0,1],[0,1],[{input:[.5],output:[.5]}]),t([1,3,-1,"roll"],[0,1,0,1],[0,1,0,1,0,1],[{input:[.25,.5],output:[.5,1,.25]}]),t([1,3,1,"roll"],[0,1,0,1],[0,1,0,1,0,1],[{input:[.25,.5],output:[1,.25,.5]}]),t([1,3,1.5,"roll"],[0,1,0,1],[0,1,0,1,0,1],null),t([1,1,"index"],[0,1],[0,1,0,1,0,1],[{input:[.5],output:[.5,1,.5]}]),t([1,3,"index","pop"],[0,1],[0,1],null),t([1,.5,"index","pop"],[0,1],[0,1],null)}),it("check input boundaries",function(){t([],[0,.5],[0,1],[{input:[1],output:[.5]}]),t([],[.5,1],[0,1],[{input:[0],output:[.5]}]),t(["dup"],[.5,.75],[0,1,0,1],[{input:[0],output:[.5,.5]}]),t([],[100,1001],[0,1e4],[{input:[1e3],output:[1e3]}])}),it("check output boundaries",function(){t([],[0,1],[0,.5],[{input:[1],output:[.5]}]),t([],[0,1],[.5,1],[{input:[0],output:[.5]}]),t(["dup"],[0,1],[.5,1,.75,1],[{input:[0],output:[.5,.75]}]),t([],[0,1e4],[100,1001],[{input:[1e3],output:[1e3]}])}),it("compile optimized",function(){var t=(new _function.PostScriptCompiler).compile([0,"add",1,1,3,-1,"roll","sub","sub",1,"mul"],[0,1],[0,1]);expect(t).toEqual("dest[destOffset + 0] = Math.max(0, Math.min(1, src[srcOffset + 0]));")})})});